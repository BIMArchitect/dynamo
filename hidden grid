// Post1:  Hidden grid in view
#Start Python Script

import clr
clr.AddReference("ProtoGeometry")
from Autodesk.DesignScript.Geometry import *
# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)
# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument

items = UnwrapElement (IN[0])
view = UnwrapElement (IN[1])

TransactionManager.Instance.EnsureInTransaction(doc)
#THUNNISSEN SCRIPT
on = 0;
off = 0;
for i in items:
	on = on + 1 if i.IsBubbleVisibleInView(DatumEnds.End0, view) else on + 0
	on = on + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) else on + 0	
	off = off + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) == False else off + 0
	off = off + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) == False else off + 0

for i in items:
	if on > off:
		i.HideBubbleInView(DatumEnds.End0, view)
		i.HideBubbleInView(DatumEnds.End1, view)
	else:
		i.ShowBubbleInView(DatumEnds.End0, view)
		i.ShowBubbleInView(DatumEnds.End1, view)

#for i in a:
#	i.HideBubble(b)
TransactionManager.Instance.TransactionTaskDone()

doc.Regenerate()
uidoc.RefreshActiveView()

OUT = "on: {0} - off: {1}" .format(on, off)

//Post2: 
