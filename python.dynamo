// Post1:  Hidden grid in view
#Start Python Script

import clr
clr.AddReference("ProtoGeometry")
from Autodesk.DesignScript.Geometry import *
# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)
# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application
uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument

items = UnwrapElement (IN[0])
view = UnwrapElement (IN[1])

TransactionManager.Instance.EnsureInTransaction(doc)
#THUNNISSEN SCRIPT
on = 0;
off = 0;
for i in items:
	on = on + 1 if i.IsBubbleVisibleInView(DatumEnds.End0, view) else on + 0
	on = on + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) else on + 0	
	off = off + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) == False else off + 0
	off = off + 1 if i.IsBubbleVisibleInView(DatumEnds.End1, view) == False else off + 0

for i in items:
	if on > off:
		i.HideBubbleInView(DatumEnds.End0, view)
		i.HideBubbleInView(DatumEnds.End1, view)
	else:
		i.ShowBubbleInView(DatumEnds.End0, view)
		i.ShowBubbleInView(DatumEnds.End1, view)

#for i in a:
#	i.HideBubble(b)
TransactionManager.Instance.TransactionTaskDone()

doc.Regenerate()
uidoc.RefreshActiveView()

OUT = "on: {0} - off: {1}" .format(on, off)

//Post 2: Delete all view Templates (fr python #16)

# Copyright(c) 2016, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

# Import DocumentManager and TransactionManager
import clr
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

if IN[0]:
	try:
		errorReport = None
		TransactionManager.Instance.EnsureInTransaction(doc)
		
		allViewTemp = FilteredElementCollector(doc).OfClass(View).ToElements()
		toDelete = []
		for i in allViewTemp:
			if i.IsTemplate:
				try:
					doc.Delete(i.Id)
				except:
					pass

                TransactionManager.Instance.TransactionTaskDone()
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()
else:
	errorReport = "Set input to True"
#Assign your output to the OUT variable
if errorReport == None:
	OUT = 0
else:
	OUT = errorReport
	
// Post 3: Creat materials in revit.

import clr
clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

names = IN[0]
transparencies = IN[1]

for mat_name, transparency in zip(names, transparencies):
    TransactionManager.Instance.EnsureInTransaction(doc)
    new_mat_id = Material.Create(doc, mat_name)
    new_mat = doc.GetElement(new_mat_id)
    new_mat.Transparency = transparency
    TransactionManager.Instance.TransactionTaskDone()
    
    #Post 4 : Clear button.
    
    
    #Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

def ClearList(_list):
    out = []
    for _list1 in _list:
        if _list1 is None:
            continue
        if isinstance(_list1, list):
             _list1 = ClearList(_list1)
             if not _list1:
                 continue
        out.append(_list1)
    return out

#Assign your output to the OUT variable
OUT = ClearList(IN[0])
